resultat <- inla(formula,
family="coxph",
control.compute = list(dic=TRUE, waic=TRUE),
data=Data,
control.hazard=list(
model="rw1",
n.intervals=16,
scale.model=TRUE,
hyper=list(prec=list(
prior="pc.prec",
param=c(0.15/0.31, 0.01)))), verbose=TRUE,
# Fins aqu? ja ho faria
control.inla = list(strategy="gaussian"),
control.fixed = list(
expand.factor.strategy='inla',
prec = 0.01,
prec.intercept = 0.01))
summary(resultat)
t.student<-resultat$summary.fixed[,1]/resultat$summary.fixed[,2]
p.value.equivalent<- 2*(round(1-pt(abs(t.student),length(t.student)-1),5))
data.frame(exp(resultat$summary.fixed[,1]), exp(resultat$summary.fixed[,c(3,5)]) ,t.student,p.value.equivalent)
library(readr)
new_analysis_IDC_ILC_only_07052018 <- read_csv("~/Downloads/new_analysis_IDC_ILC_only_07052018.csv")
View(new_analysis_IDC_ILC_only_07052018)
View(new_analysis_IDC_ILC_only_07052018)
datos<- dnew_analysis_IDC_ILC_only_07052018
View(datos)
#Read csv file into R
datos<- new_analysis_IDC_ILC_only_07052018
View(datos)
#Creem els differents datasets
options(contrasts=c("contr.treatment","contr.poly"))
#attach(lobular)
#summary(lobular)
#View(lobular)
#attach(ductal)
#summary(ductal)
#View(ductal)
attach(datos)
View(datos)
summary(datos)
detach(datos)
detach(datos)
detach(datos)
#Creem els differents datasets
options(contrasts=c("contr.treatment","contr.poly"))
#attach(lobular)
#summary(lobular)
#View(lobular)
#attach(ductal)
#summary(ductal)
#View(ductal)
attach(datos)
View(datos)
summary(datos)
# Carregar la llibreria INLA
#install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
library(INLA)
# Mesh
# Transformo les coordenades a escala 0-1
UTM_X<-as.numeric(utm_x)
UTM_Y<-as.numeric(utm_y)
x01<-(UTM_X-min(UTM_X,na.rm=T))/ (max(UTM_X,na.rm=T)-min(UTM_X,na.rm=T))
y01<-(UTM_Y-min(UTM_Y,na.rm=T))/ (max(UTM_Y,na.rm=T)-min(UTM_Y,na.rm=T))
# Construcci? de la malla
mesh = inla.mesh.create(cbind(x01,y01))
spde = inla.spde2.matern(mesh, constr=TRUE)
plot(mesh)
field=mesh$idx$loc   # Identificador espacial
temps= seguiment_dies
temps[seguiment_dies==0]=1
Data<-data.frame(
temps=temps/max(temps,na.rm=T) ,
status= vitalstatus2 ,
edat_agrupat=edat_agrupat ,
crib_r= crib_r,
size=size,
stage=stage,
hist_group= hist_group,
rural=rural,
nqdp2= nqdp2,
r_est_r= r_est_r,
r_est = r_est,
grade=grade_r,
field=mesh$idx$loc,
id_pacient= id_pacient)
id_patient.unique = unique(id_pacient)
id_patient.replicate = numeric(length(id_pacient))
for(i in 1:length(id_pacient)) {
id_patient.replicate[i] = which(id_patient.unique == id_pacient [i])
}
Data$id_patient.replicate = id_patient.replicate
# Model.9 - Invasiu sense DCO's
formula <- inla.surv(temps,status) ~ factor(nqdp2)+ factor(edat_agrupat) + factor(hist_group) + factor(size) + factor(stage) + factor(rural)  +
factor(r_est_r) + factor(grade) +
# Fins aqu?, superviv?ncia (observada) est?ndard
f(id_patient.replicate, model="iid",
hyper= list( prec= list( prior="pc.prec", param=c(0.30/0.31, 0.01))))+
f(field, model=spde)
resultat <- inla(formula,
family="coxph",
control.compute = list(dic=TRUE, waic=TRUE),
data=Data,
control.hazard=list(
model="rw1",
n.intervals=16,
scale.model=TRUE,
hyper=list(prec=list(
prior="pc.prec",
param=c(0.15/0.31, 0.01)))), verbose=TRUE,
# Fins aqu? ja ho faria
control.inla = list(strategy="gaussian"),
control.fixed = list(
expand.factor.strategy='inla',
prec = 0.01,
prec.intercept = 0.01))
summary(resultat)
t.student<-resultat$summary.fixed[,1]/resultat$summary.fixed[,2]
p.value.equivalent<- 2*(round(1-pt(abs(t.student),length(t.student)-1),5))
data.frame(exp(resultat$summary.fixed[,1]), exp(resultat$summary.fixed[,c(3,5)]) ,t.student,p.value.equivalent)
View(data_specifichist)
View(data_lobular_ductal_other)
View(Data)
summary(data)
summary(Data)
tabulate(Data$hist_group)
tabulate(data_lobular_ductal_others$hist_group)
View(data_lobular_ductal_other)
tabulate(data_lobular_ductal_other$hist_group)
datos<- data_lobular_ductal_other
detach(datos)
detach(datos)
attach(datos)
detach(lobular_ductal)
detach(lobular_ductal)
detach(datos)
detach(datos)
attach(datos)
library(INLA)
# Mesh
# Transformo les coordenades a escala 0-1
UTM_X<-as.numeric(utm_x)
UTM_Y<-as.numeric(utm_y)
x01<-(UTM_X-min(UTM_X,na.rm=T))/ (max(UTM_X,na.rm=T)-min(UTM_X,na.rm=T))
y01<-(UTM_Y-min(UTM_Y,na.rm=T))/ (max(UTM_Y,na.rm=T)-min(UTM_Y,na.rm=T))
# Construcci? de la malla
mesh = inla.mesh.create(cbind(x01,y01))
spde = inla.spde2.matern(mesh, constr=TRUE)
plot(mesh)
field=mesh$idx$loc   # Identificador espacial
temps= seguiment_dies
temps[seguiment_dies==0]=1
Data<-data.frame(
temps=temps/max(temps,na.rm=T) ,
status= vitalstatus2 ,
edat_agrupat=edat_agrupat ,
crib_r= crib_r,
size=size,
stage=stage,
hist_group= hist_group,
rural=rural,
nqdp2= nqdp2,
r_est_r= r_est_r,
r_est = r_est,
grade=grade_r,
field=mesh$idx$loc,
id_pacient= id_pacient)
id_patient.unique = unique(id_pacient)
id_patient.replicate = numeric(length(id_pacient))
for(i in 1:length(id_pacient)) {
id_patient.replicate[i] = which(id_patient.unique == id_pacient [i])
}
Data$id_patient.replicate = id_patient.replicate
# Model.9 - Invasiu sense DCO's
formula <- inla.surv(temps,status) ~ factor(nqdp2)+ factor(edat_agrupat) + factor(hist_group) + factor(size) + factor(stage) + factor(rural)  +
factor(r_est_r) + factor(grade) +
# Fins aqu?, superviv?ncia (observada) est?ndard
f(id_patient.replicate, model="iid",
hyper= list( prec= list( prior="pc.prec", param=c(0.30/0.31, 0.01))))+
f(field, model=spde)
resultat <- inla(formula,
family="coxph",
control.compute = list(dic=TRUE, waic=TRUE),
data=Data,
control.hazard=list(
model="rw1",
n.intervals=16,
scale.model=TRUE,
hyper=list(prec=list(
prior="pc.prec",
param=c(0.15/0.31, 0.01)))), verbose=TRUE,
# Fins aqu? ja ho faria
control.inla = list(strategy="gaussian"),
control.fixed = list(
expand.factor.strategy='inla',
prec = 0.01,
prec.intercept = 0.01))
summary(resultat)
t.student<-resultat$summary.fixed[,1]/resultat$summary.fixed[,2]
p.value.equivalent<- 2*(round(1-pt(abs(t.student),length(t.student)-1),5))
data.frame(exp(resultat$summary.fixed[,1]), exp(resultat$summary.fixed[,c(3,5)]) ,t.student,p.value.equivalent)
Data<-data.frame(
temps=temps/max(temps,na.rm=T) ,
status= vitalstatus2 ,
edat_agrupat=edat_agrupat ,
crib_r= crib_r,
size=size,
stage=stage,
hist_group= hist_group,
hist3_agrupat=hist3_agrupat,
rural=rural,
nqdp2= nqdp2,
r_est_r= r_est_r,
r_est = r_est,
grade=grade_r,
field=mesh$idx$loc,
id_pacient= id_pacient)
id_patient.unique = unique(id_pacient)
id_patient.replicate = numeric(length(id_pacient))
for(i in 1:length(id_pacient)) {
id_patient.replicate[i] = which(id_patient.unique == id_pacient [i])
}
Data$id_patient.replicate = id_patient.replicate
# Model.9 - Invasiu sense DCO's
formula <- inla.surv(temps,status) ~ factor(nqdp2)+ factor(edat_agrupat) + factor(hist3_agrupat) + factor(size) + factor(stage) + factor(rural)  +
factor(r_est_r) + factor(grade) +
# Fins aqu?, superviv?ncia (observada) est?ndard
f(id_patient.replicate, model="iid",
hyper= list( prec= list( prior="pc.prec", param=c(0.30/0.31, 0.01))))+
f(field, model=spde)
resultat <- inla(formula,
family="coxph",
control.compute = list(dic=TRUE, waic=TRUE),
data=Data,
control.hazard=list(
model="rw1",
n.intervals=16,
scale.model=TRUE,
hyper=list(prec=list(
prior="pc.prec",
param=c(0.15/0.31, 0.01)))), verbose=TRUE,
# Fins aqu? ja ho faria
control.inla = list(strategy="gaussian"),
control.fixed = list(
expand.factor.strategy='inla',
prec = 0.01,
prec.intercept = 0.01))
summary(resultat)
t.student<-resultat$summary.fixed[,1]/resultat$summary.fixed[,2]
p.value.equivalent<- 2*(round(1-pt(abs(t.student),length(t.student)-1),5))
data.frame(exp(resultat$summary.fixed[,1]), exp(resultat$summary.fixed[,c(3,5)]) ,t.student,p.value.equivalent)
Data<-data.frame(
temps=temps/max(temps,na.rm=T) ,
status= vitalstatus2 ,
edat_agrupat=edat_agrupat ,
crib_r= crib_r,
size=size,
stage=stage,
hist_group= hist_group,
hist3_agrupat=hist3_agrupat,
rural=rural,
nqdp2= nqdp2,
r_est_r= r_est_r,
r_est = r_est,
grade=grade_r,
field=mesh$idx$loc,
id_pacient= id_pacient)
id_patient.unique = unique(id_pacient)
id_patient.replicate = numeric(length(id_pacient))
for(i in 1:length(id_pacient)) {
id_patient.replicate[i] = which(id_patient.unique == id_pacient [i])
}
Data$id_patient.replicate = id_patient.replicate
# Model.9 - Invasiu sense DCO's
formula <- inla.surv(temps,status) ~ factor(nqdp2)+ factor(edat_agrupat) + factor(hist3_agrupat) + factor(size) + factor(stage) + factor(rural)  +
factor(r_est_r) + factor(grade) +
# Fins aqu?, superviv?ncia (observada) est?ndard
f(id_patient.replicate, model="iid",
hyper= list( prec= list( prior="pc.prec", param=c(0.30/0.31, 0.01))))+
f(field, model=spde)
resultat <- inla(formula,
family="coxph",
control.compute = list(dic=TRUE, waic=TRUE),
data=Data,
control.hazard=list(
model="rw1",
n.intervals=16,
scale.model=TRUE,
hyper=list(prec=list(
prior="pc.prec",
param=c(0.15/0.31, 0.01)))), verbose=TRUE,
# Fins aqu? ja ho faria
control.inla = list(strategy="gaussian"),
control.fixed = list(
expand.factor.strategy='inla',
prec = 0.01,
prec.intercept = 0.01))
summary(resultat)
t.student<-resultat$summary.fixed[,1]/resultat$summary.fixed[,2]
p.value.equivalent<- 2*(round(1-pt(abs(t.student),length(t.student)-1),5))
data.frame(exp(resultat$summary.fixed[,1]), exp(resultat$summary.fixed[,c(3,5)]) ,t.student,p.value.equivalent)
x=seq(1,10)
alpha0=0.1
alpha1=0.2
lambda1=0.5
delta0=0.1
psi=0.01
delta1=10
yc.before<- c(alpha0 + lambda1*x[1:5])
yc.after<- c(alpha0 + lambda1*x[6:10] + delta0)
yc <- c(yc.before,yc.after)
ye.before<- alpha0 + alpha1 + lambda1*x[1:5]  + psi*x[1:5]
ye.after<- alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1
#ye.c<- c(alpha0 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
ye <- c(ye.before,ye.after)
yec <- c(ye.before,alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0)
plot(x,ye,type="l")
lines(x,yec,type="l",lty=2)
yc.before<- c(alpha0 + lambda1*x[1:5])
yc.after<- c(alpha0 + lambda1*x[6:10] + delta0)
yc <- c(yc.before,yc.after)
ye.before<- alpha0 + alpha1 + lambda1*x[1:5]  + psi*x[1:5]
ye.after<- alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
#ye.c<- c(alpha0 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
ye <- c(ye.before,ye.after)
yec <- c(ye.before,alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0)
plot(x,ye,type="l")
lines(x,yec,type="l",lty=2)
abline(v=5.5)
delta1=0.2
yc.before<- c(alpha0 + lambda1*x[1:5])
yc.after<- c(alpha0 + lambda1*x[6:10] + delta0)
yc <- c(yc.before,yc.after)
ye.before<- alpha0 + alpha1 + lambda1*x[1:5]  + psi*x[1:5]
ye.after<- alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
#ye.c<- c(alpha0 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
ye <- c(ye.before,ye.after)
yec <- c(ye.before,alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0)
plot(x,ye,type="l")
lines(x,yec,type="l",lty=2)
abline(v=5.5)
delta1=-0.1
yc.before<- c(alpha0 + lambda1*x[1:5])
yc.after<- c(alpha0 + lambda1*x[6:10] + delta0)
yc <- c(yc.before,yc.after)
ye.before<- alpha0 + alpha1 + lambda1*x[1:5]  + psi*x[1:5]
ye.after<- alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
#ye.c<- c(alpha0 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
ye <- c(ye.before,ye.after)
yec <- c(ye.before,alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0)
plot(x,ye,type="l")
lines(x,yec,type="l",lty=2)
abline(v=5.5)
delta0=0.01
psi=0.01
delta1=0.2
yc.before<- c(alpha0 + lambda1*x[1:5])
yc.after<- c(alpha0 + lambda1*x[6:10] + delta0)
yc <- c(yc.before,yc.after)
ye.before<- alpha0 + alpha1 + lambda1*x[1:5]  + psi*x[1:5]
ye.after<- alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
#ye.c<- c(alpha0 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
ye <- c(ye.before,ye.after)
yec <- c(ye.before,alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0+ delta1*(x[6:10]-5))
plot(x,ye,type="l")
lines(x,yec,type="l",lty=2)
abline(v=5.5)
delta1=1
yc.before<- c(alpha0 + lambda1*x[1:5])
yc.after<- c(alpha0 + lambda1*x[6:10] + delta0)
yc <- c(yc.before,yc.after)
ye.before<- alpha0 + alpha1 + lambda1*x[1:5]  + psi*x[1:5]
ye.after<- alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
#ye.c<- c(alpha0 + lambda1*x[6:10]  + psi*x[6:10] + delta0 + delta1*(x[6:10]-5)
ye <- c(ye.before,ye.after)
yec <- c(ye.before,alpha0 + alpha1 + lambda1*x[6:10]  + psi*x[6:10] + delta0+ delta1*(x[6:10]-5))
plot(x,ye,type="l")
lines(x,yec,type="l",lty=2)
abline(v=5.5)
var(rbeta(10000,1,1))
1/12
var(rbeta(10000,5,1))
5/252
1/12
5/6
mean(rgamma(1000,150,10))
mean(rgamma(1000,180,10))
mean(rgamma(1000,200,10))
mean(rgamma(1000,220,10))
var(rgamma(1000,220,10))
var(rgamma(1000,220,20))
var(rgamma(1000,220,5))
var(rgamma(1000,110,5))
mean(rgamma(1000,110,5))
library(INLA)
inla.list.models()
library(INLABMA)
library(INLA)
epsilon=rnorm(1000,0,0.1)
setwd("~/")
setwd("~/Dropbox/Teaching/INLA/Glasgow 2019/Practical")
knitr::opts_chunk$set(echo = TRUE)
load("data_salmonellosis.RData")
names(data.salm)
dim(data.Y)
dim(data.offset)
colnames(data.Y)
colnames(data.offset)
n = nrow(data.Y) #n. of areas
T = ncol(data.Y) - 1 #n. of years
prob.salm = data.frame(BEZIRKSNR=data.Y$BEZIRKSNR,
p=data.Y[,1:T]/data.offset[,1:T]) #exclude the BEZIRKSNR col
prob.salm.cat = data.frame(lapply(prob.salm[,2:19],
function(x) (cut(x, c(0,0.01,0.6,1), include.lowest=TRUE)))
)
prob.salm.cat$BEZIRKSNR = prob.salm$BEZIRKSNR #include names
colnames(prob.salm.cat)
library(maptools)
map.swiss = map
map.swiss@data = merge(map.swiss@data,
prob.salm.cat, by="BEZIRKSNR")
head(map.swiss@data)
spplot(map.swiss,c("p.1991","p.2008"),col.regions= terrain.colors(3))
swiss.adj = poly2nb(map.swiss,queen = T)
library(spdep)
swiss.adj = poly2nb(map.swiss,queen = T)
summary(swiss.adj)
plot(map.swiss)
swiss.adj
map.swiss@data
map.swiss@data[,1]
map.swiss[,1]
coordinates(map.swiss)[,1]
plot(swiss.adj, coordinates(map.swiss),
pch = ".", add = TRUE, col=4)
points(coordinates(map.swiss)[,1],coordinates(map.swiss)[,2],bg="red", pch=21, cex=0.75)
plot(swiss.adj, coordinates(map.swiss),
pch = ".", add = TRUE, col=4)
points(coordinates(map.swiss)[,1],coordinates(map.swiss)[,2],bg="red", pch=21, cex=0.75)
points(coordinates(map.swiss)[,1],coordinates(map.swiss)[,2],bg="red", pch=21, cex=0.75)
plot(swiss.adj, coordinates(map.swiss),
)
plot(map.swiss)
plot(swiss.adj, coordinates(map.swiss),
pch = ".", add = TRUE, col=4)
help(poly2nb)
swiss.adj = poly2nb(map.swiss,queen = T,snap=0)
summary(swiss.adj)
map.swiss
setwd("~/Dropbox/Teaching/INLA/Glasgow 2019/Tutorial")
knitr::opts_chunk$set(echo = TRUE,warning=TRUE,message=TRUE)
options(width=100)
#opts_chunk$set(comment = "", warning = FALSE, message = FALSE, echo = TRUE, tidy = FALSE,       size="small")
LondonSuicides = read.csv("LondonSuicides.csv",sep=";",header=T)
library(rgdal)
london.shp = readOGR(paste0(mydir,"London_Borough.shp"))
mydir<-getwd()
library(rgdal)
london.shp = readOGR(paste0(mydir,"London_Borough.shp"))
mydir
london.shp = readOGR("London_Borough.shp")
library(sp)
spplot(london.shp,"HECTARES")
library(spdep)
london.adj = poly2nb(london.shp,queen = T)
summary(london.adj)
nb2INLA(file=paste0(mydir,"london.graph"),
nb=london.adj)
dir() #see the new file london.graph
london.adj.path = paste0(mydir,"london.graph")
london.adj.path
london.adj.path = paste0(mydir,"/london.graph")
london.adj.path
library(INLA)
formula = y ~ 1 + x1
output0 = inla(formula,
family = "poisson",
data = LondonSuicides,
E = E)
summary(output0)
formula = y ~ 1 + x1 +
f(id,model="iid",
hyper=list(prec=list(prior="loggamma",param=c(1,0.1))))
output2 = inla(formula,
family = "poisson",
data = LondonSuicides,
E = E,
control.compute=list(dic=TRUE))
LondonSuicides$id = seq(1:nrow(LondonSuicides))
head(LondonSuicides)
formula = y ~ 1 + x1 + f(id,model="iid")
output1 = inla(formula,
family = "poisson",
data = LondonSuicides,
E = E)
formula = y ~ 1 + x1 +
f(id,model="iid",
hyper=list(prec=list(prior="loggamma",param=c(1,0.1))))
output2 = inla(formula,
family = "poisson",
data = LondonSuicides,
E = E,
control.compute=list(dic=TRUE))
summary(output2)
prec.post2 = output2$marginals.hyperpar[[1]]
plot(prec.post2,type="l")
lines(prec.post,col=2)
plot(prec.post2,type="l")
var.post = inla.tmarginal(fun=function(x) 1/x, mar=prec.post2)
plot(var.post,type="l",xlab=expression(sigma^2))
plot(var.post,type="l",xlab=expression(sigma^2))
getwd()
