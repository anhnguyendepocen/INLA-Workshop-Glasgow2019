cex.axis=1.5)
segments(0,0,0,0.1,lty=2)
segments(10,0,10,0.1,lty=2)
segments(0,0,-2,0,lwd=2)
segments(-3,0,-2,0,lty=2)
segments(10,0,12,0,lwd=2)
segments(13,0,12,0,lty=2)
coord.x = c(4,seq(4,6,l=100),6)
coord.y = c(0, dunif(seq(4,6,l=100)), 0)
polygon(coord.x,coord.y, col="gray", border = "red",density=40)
plot(x,dx,type="l",ylim=c(0,0.12),xlim=c(-3,13),lwd=2,ylab="f(x)",
cex.axis=1.25)
coord.x
coord.x = c(4,seq(4,6,l=100),6)
coord.y = c(0, dunif(seq(4,6,l=100),0,10), 0)
polygon(coord.x,coord.y, col="gray", border = "red",density=40)
plot(x,dx,type="l",ylim=c(0,0.12),xlim=c(-3,13),lwd=2,ylab="f(x)",
cex.axis=1.5)
segments(0,0,0,0.1,lty=2)
segments(10,0,10,0.1,lty=2)
segments(0,0,-2,0,lwd=2)
segments(-3,0,-2,0,lty=2)
segments(10,0,12,0,lwd=2)
segments(13,0,12,0,lty=2)
coord.x = c(4,seq(4,6,l=100),6)
coord.y = c(0, dunif(seq(4,6,l=100),0,10), 0)
polygon(coord.x,coord.y, col="gray", border = "red",density=40)
plot(x,dx,type="l",ylim=c(0,0.12),xlim=c(-3,13),lwd=2,ylab="f(x)",
cex.axis=1.5, xaxt="n")
axis(1,seq(0,10,by=2),seq(0,10,by=2))
axis(1,seq(0,10,by=2),seq(0,10,by=2),cex=1.5)
axis(1,seq(0,10,by=2),seq(0,10,by=2),cex.axis=1.5)
plot(x,dx,type="l",ylim=c(0,0.12),xlim=c(-3,13),lwd=2,ylab="f(x)",
cex.axis=1.5, xaxt="n")
axis(1,seq(0,10,by=2),seq(0,10,by=2),cex.axis=1.5)
segments(0,0,0,0.1,lty=2)
segments(10,0,10,0.1,lty=2)
segments(0,0,-2,0,lwd=2)
segments(-3,0,-2,0,lty=2)
segments(10,0,12,0,lwd=2)
segments(13,0,12,0,lty=2)
coord.x = c(4,seq(4,6,l=100),6)
coord.y = c(0, dunif(seq(4,6,l=100),0,10), 0)
polygon(coord.x,coord.y, col="gray", border = "red",density=40)
plot(x,dx,type="l",ylim=c(0,0.12),xlim=c(-3,13),lwd=2,ylab="f(x)",
cex.axis=1.5, xaxt="n")
axis(1,seq(0,10,by=2),seq(0,10,by=2),cex.axis=1.5)
segments(0,0,0,0.1,lty=2)
segments(10,0,10,0.1,lty=2)
segments(0,0,-2,0,lwd=2)
segments(-3,0,-2,0,lty=2)
segments(10,0,12,0,lwd=2)
segments(13,0,12,0,lty=2)
polygon(coord.x,coord.y, col="gray", border = "red",density=40)
text(4,0.12,"p(4<X<6)=0.2",cex=2)
text(5,0.12,"p(4<X<6)=0.2",cex=2)
plot(x,dx,type="l",ylim=c(0,0.12),xlim=c(-3,13),lwd=2,ylab="f(x)",
cex.axis=1.5, xaxt="n")
axis(1,seq(0,10,by=2),seq(0,10,by=2),cex.axis=1.5)
segments(0,0,0,0.1,lty=2)
segments(10,0,10,0.1,lty=2)
segments(0,0,-2,0,lwd=2)
segments(-3,0,-2,0,lty=2)
segments(10,0,12,0,lwd=2)
segments(13,0,12,0,lty=2)
coord.x = c(4,seq(4,6,l=100),6)
coord.y = c(0, dunif(seq(4,6,l=100),0,10), 0)
polygon(coord.x,coord.y, col="gray", border = "red",density=40)
text(5,0.12,"p(4<X<6)=0.2",cex=2)
arrows(3,0.09,3,.01,col=11)
arrows(5,0.0.11,5,0.1,col=11)
arrows(5,0.11,5,0.1,col=11)
arrows(5,0.12,5,0.1,col=11)
arrows(5,0.115,5,0.1,col=11,lwd=2)
plot(x,dx,type="l",ylim=c(0,0.12),xlim=c(-3,13),lwd=2,ylab="f(x)",
cex.axis=1.5, xaxt="n")
axis(1,seq(0,10,by=2),seq(0,10,by=2),cex.axis=1.5)
segments(0,0,0,0.1,lty=2)
segments(10,0,10,0.1,lty=2)
segments(0,0,-2,0,lwd=2)
segments(-3,0,-2,0,lty=2)
segments(10,0,12,0,lwd=2)
segments(13,0,12,0,lty=2)
coord.x = c(4,seq(4,6,l=100),6)
coord.y = c(0, dunif(seq(4,6,l=100),0,10), 0)
polygon(coord.x,coord.y, col="gray", border = "red",density=40)
text(5,0.12,"p(4<X<6)=0.2",cex=2)
arrows(5,0.115,5,0.1,col=11,lwd=2)
arrows(5,0.115,5,0.09,col=11,lwd=2)
plot(x,dx,type="l",ylim=c(0,0.12),xlim=c(-3,13),lwd=2,ylab="f(x)",
cex.axis=1.5, xaxt="n")
axis(1,seq(0,10,by=2),seq(0,10,by=2),cex.axis=1.5)
segments(0,0,0,0.1,lty=2)
segments(10,0,10,0.1,lty=2)
segments(0,0,-2,0,lwd=2)
segments(-3,0,-2,0,lty=2)
segments(10,0,12,0,lwd=2)
segments(13,0,12,0,lty=2)
coord.x = c(4,seq(4,6,l=100),6)
coord.y = c(0, dunif(seq(4,6,l=100),0,10), 0)
polygon(coord.x,coord.y, col="gray", border = "red",density=40)
text(5,0.12,"p(4<X<6)=0.2",cex=2)
arrows(5,0.115,5,0.09,col=11,lwd=2)
plot(x,dx,type="l",ylim=c(0,0.12),xlim=c(-3,13),lwd=2,ylab="f(x)",
cex.axis=1.5, xaxt="n")
axis(1,seq(0,10,by=2),seq(0,10,by=2),cex.axis=1.5)
segments(0,0,0,0.1,lty=2)
segments(10,0,10,0.1,lty=2)
segments(0,0,-2,0,lwd=2)
segments(-3,0,-2,0,lty=2)
segments(10,0,12,0,lwd=2)
segments(13,0,12,0,lty=2)
coord.x = c(4,seq(4,6,l=100),6)
coord.y = c(0, dunif(seq(4,6,l=100),0,10), 0)
polygon(coord.x,coord.y, col="gray", border = "red",density=40)
text(5,0.12,"P(4<X<6)=0.2",cex=2)
arrows(5,0.115,5,0.09,col=11,lwd=2)
x=rnorm(1000)
y=rnorm(1000)
cov(x,y)
plot(x,y)
cov(2*x,y)
cov(x,y)*2
cov(2*x,2*y)
cov(x,y)*4
cov(x,y+10)
cov(x,-y)
plot(x,-x)
plot(x,x)
cor(x,y)
cov(x,y)
cor(x,y)
cor(2*x,y)
cor(2*x,2*y)
cor(2*x,-2*y)
cor(2*x,-2*y+4)
cor(-2*x,-2*y+4)
runfi(5)
runif(5)
x = rnorm(5)
Date()
today()
Sys.Date()
Sys.Date(-5)
Sys.Date()-5
Sys.Date : (Sys.Date()-5)
x
y
var(y)
30/7
Sys.Date()
Sys.Date() : (Sys.Date()-5)
Sys.Date()-5
Date = seq(Sys.Date(), (Sys.Date()-5))
Date = seq(Sys.Date(), Sys.Date()-5)
Date = seq(Sys.Date(), Sys.Date()-5, by=1)
Date = seq(Sys.Date()-5, Sys.Date(), by=1)
Date
mydata = data.frame(Date,x)
x = rnorm(6)
Date = seq(Sys.Date()-5, Sys.Date(), by=1)
mydata = data.frame(Date,x)
head(mydata)
mydata[order(mydata$Date)]
mydata[order(mydata$Date),]
mydata[order(mydata$Date,decreasing = F),]
mydata[order(mydata$Date,decreasing = T),]
####################################################
####### More about objects in R
###################################################
# Vector of numbers
x = c(37, 38, 41, 44, 39)
# Vector of logicals
log= c(T, T, T, F, F)
x[log] #extract only the TRUEs
# Vector of strings
z = c("Female", "Female", "Male", "Male", "Female")
z
barplot(table(z))
class(z)
# Force z to be a factor
z2 = factor(z)
z2
class(z2)
plot(z2)
as.numeric(z2) #behind factor you have numbers
plot(table(z2))
# Another example of factor
#1 = bg city centre
#2 = outside
y = c(2,1,2,2,1)
?factor
# Another example of factor
#1 = bg city centre
#2 = bg province
#3 = other provinces in Lombardia
y = c(2,1,2,2,1)
y2 = factor(y, levels=c(1,2,3), labels = c("Bg City Centre", "Bg province", "Others"))
y2
plot(y2)
plot(y2)
levels(y2)
y2[1] == y2[3]
y2[1] > y2[3]
# Another example of factor
# There is also the option ordered = T in the function factor
w = c("December", "October", "August", "February", "March") #month of birth
w2 = factor(w,levels=c("January","February","March",
"April","May","June","July","August","September",
"October","November","December"),ordered=TRUE)
month.name
# Another example of factor
# There is also the option ordered = T in the function factor
w = c("December", "October", "August", "February", "March") #month of birth
month.name
w2 = factor(w,levels=month.name,ordered=TRUE)
?month.name
# I'm omitting the labels (use by default the level names)
w2
plot(w2)
w2[1] > w2[3]
# Another example of factor
lets = sample(letters,size=100,replace=TRUE)
class(lets)
lets = factor(lets)
lets
plot(lets,
col=rainbow(length(levels(lets))))
# Combine x, y, w2 and z2 in a dataframe
data.frame(x, log, y2,w2, z2)
w = c("December", "October", "August", "February", "March") #month of birth
month.name #internal function
w2 = factor(w,levels=month.name,ordered=TRUE)
# I'm omitting the labels (use by default the level names)
w2
plot(w2)
w2[1] > w2[3]
# Another example of factor
lets = sample(letters,size=100,replace=TRUE)
class(lets)
lets = factor(lets)
lets
plot(lets,
col=rainbow(length(levels(lets))))
factor(lets)
lets
factor(y)
inla.list.models()
library(INLA)
inla.list.models()
setwd("~/Google Drive@gmail/_dataset FIRB")
aa = read.csv("SDO_2010.txt",header=T)
SDO_2010 <- read.delim("~/Google Drive@gmail/_dataset FIRB/SDO_2010.txt")
View(SDO_2010)
dim(SDO_2010)
head(SDO_2010)
head(SDO_2010)
head(SDO_2010)
dim(SDO_2010)
head(SDO_2010)
nstall.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/testing"), dep=TRUE)
library(INLA)
load("LipCancer.RData")
setwd("~/Dropbox/INLA - course/Glasgow 2019/Tutorial")
load("LipCancer.RData")
LipCancerData = data.frame(id=seq(1,56),O=LipCancer$O,E=LipCancer$E,X=LipCancer$X)
head(LipCancerData)
formula = O ~ 1 + X + f(id,model="iid") #default prior for log tau_v: logGamma(1,5e-05)
lipcancer.poisson = inla(formula,family="poisson",
data=LipCancerData, offset=log(E))
summary(lipcancer.poisson)
formula = O ~ 1 + X +
f(id,model="iid",
hyper=list(prec=
list(prior="loggamma",param=c(1,0.00001))))
lipcancer.poisson2 = inla(formula,family="poisson",
data=LipCancerData, offset=log(E),
control.compute=list(config = TRUE, #used later
dic=TRUE))
summary(lipcancer.poisson2)
inla.emarginal(exp,lipcancer.poisson2$marginals.fixed$X)
names(lipcancer.poisson2$marginals.hyperpar)
sigmav0 = inla.tmarginal(function(x) sqrt(1/x), lipcancer.poisson2$marginals.hyperpar[[1]])
inla.zmarginal(sigmav0)
# The summary statistics for the random effects
names(lipcancer.poisson2$summary.random)
head(lipcancer.poisson2$summary.random[[1]])
#head(lipcancer.poisson2$summary.random$id) #alternatively use the dollar
dim(lipcancer.poisson2$summary.random[[1]]) #nrow = n. of areas
# The posterior marginals for the random effects
class(lipcancer.poisson2$marginals.random)
names(lipcancer.poisson2$marginals.random)
class(lipcancer.poisson2$marginals.random[["id"]])
length(lipcancer.poisson2$marginals.random[["id"]])
# How to compute for the FIRST area the posterior mean of the exponentiated random effect
inla.emarginal(exp, lipcancer.poisson2$marginals.random[["id"]][[1]])
# Use lapply
post.mean.exp.v0 = lapply(lipcancer.poisson2$marginals.random[["id"]], function(x) inla.emarginal(exp,x))
head(post.mean.exp.v0)
# Prepare everything for the map
library(maptools)
geobugs.map = readSplus("LipCancer.map") #read a map exported from WinBUGS
geobugs.map = readSplus("LipCancer.map") #read a map exported from WinBUGS
library(INLA)
load("LipCancer.RData")
head(LipCancer)
LipCancerData = data.frame(id=seq(1,56),O=LipCancer$O,E=LipCancer$E,X=LipCancer$X)
write(LipCancerData,file="LipCancerData.RData")
save(LipCancerData,file="LipCancerData.RData")
load("LipCancerData.RData")
head(LipCancer)
head(LipCancerData)
head(LipCancerData)
dim(LipCancerData)
inla.list.models("prior")
?inla.list.models
inla.doc(!iid)
inla.doc("iid")
inla.list.models("latent")
inla.doc("rw2")
inla.doc("iid2")
inla.doc("iid2")
library(INLA)
load("LipCancerData.RData")
head(LipCancerData)
dim(LipCancerData)
formula = O ~ 1 + X + f(id,model="iid")
lipcancer.poisson = inla(formula,
family="poisson",
data=LipCancerData,
offset=log(E))
summary(lipcancer.poisson)
plot(lipcancer.poisson)
names(lipcancer.poisson)
output = inla(formula,
family="poisson",
data=LipCancerData,
offset=log(E))
summary(output)
names(output)
# Summary statistics of the fixed effects
output$summary.fixed
# Summary statistics of the hyperparameter
output$summary.hyperpar
# Explore the fixed effect marginal distributions
class(output$marginals.fixed)
names(output$marginals.fixed)
# Extract the marginal of b1
b1_post = output$marginals.fixed[["X"]]
# Another function for getting summary statistics
inla.zmarginal(b1_post)
# Plot the posterior marginal distribution
plot(b1_post, type="l")
# Smoother version of the same plot
plot(inla.smarginal(b1_post),type="l")
# Quantile function
inla.qmarginal(0.05,b1_post)
# Distribution function
inla.pmarginal(0.05,b1_post)
# Distribution function
inla.pmarginal(0.1,b1_post)
# Density function
inla.dmarginal(0.1,beta1_post)
# Density function
inla.dmarginal(0.1,b1_post)
# Random generation
inla.rmarginal(4,b1_post)
class(output$marginals.hyperpar)
names(output$marginals.hyperpar)
# Plot the precision marginal posterior distribution
prec_post = output$marginals.hyperpar[[1]]
plot(inla.smarginal(prec_post),t="l")
# Define the variance marginal
var_post = inla.tmarginal(fun=function(x) 1/x, mar=prec_post)
plot(inla.smarginal(var_post),type="l",xlab=expression(sigma^2))
# Compute the posterior mean of the variance
inla.emarginal(fun=function(x) 1/x, marg=prec_post)
formula = O ~ 1 + X +
f(id,model="iid",hyper=list(prec=                                 list(prior="loggamma",param=c(1,0.00001))))
output2 = inla(formula,
family="poisson",
data=LipCancerData,
offset=log(E),
control.compute=list(config = TRUE, #used later
dic=TRUE))
inla.emarginal(exp,output$marginals.fixed$X)
# The summary statistics for the random effects
names(output2$summary.random)
head(output2$summary.random[[1]])
#head(output2$summary.random$id) #alternatively use the dollar
dim(output2$summary.random[[1]]) #nrow = n. of areas
# The posterior marginals for the random effects
class(output2$marginals.random)
names(output2$marginals.random)
class(output2$marginals.random[["id"]])
length(output2$marginals.random[["id"]])
# How to compute for the FIRST area the posterior mean of the exponentiated random effect
inla.emarginal(exp, outptu2$marginals.random[["id"]][[1]])
# How to compute for the FIRST area the posterior mean of the exponentiated random effect
inla.emarginal(exp, output$marginals.random[["id"]][[1]])
# Use lapply
post.mean.exp.v = lapply(output2$marginals.random[["id"]],
function(x) inla.emarginal(exp,x))
head(post.mean.exp.v)
# Prepare everything for the map
library(maptools)
?readSplus
# Save the posterior mean of exp(v) in a dataframe
data.exp.v = data.frame(ID=names(geobugs.map),
post.mean=unlist(post.mean.exp.v))
geobugs.map = readSplus("LipCancer.map") #read a map exported from WinBUGS
# Save the posterior mean of exp(v) in a dataframe
data.exp.v = data.frame(ID=names(geobugs.map),
post.mean=unlist(post.mean.exp.v))
row.names(data.exp.v) = names(geobugs.map)
head(data.exp.v)
head(geobugs.map)
head(geobugs.map@data)
class(geobugs.map)
wards = SpatialPolygonsDataFrame(geobugs.map,data.exp.v)
head(wards@data)
# Mapping!
spplot(obj=wards, zcol="post.mean",main="")
library(maptools)
geobugs.map = readSplus("LipCancer.map") #read a map exported from WinBUGS
class(geobugs.map)
# Save the posterior mean of exp(v) in a dataframe
wards = SpatialPolygonsDataFrame(geobugs.map,LipCancerData)
geobugs.map = readSplus("LipCancer.map") #read a map exported from WinBUGS
class(geobugs.map)
# Save the posterior mean of exp(v) in a dataframe
wards = SpatialPolygonsDataFrame(geobugs.map,LipCancerData)
dim(LipCancerData)
geobugs.map@polygons
length(geobugs.map@polygons()
length(geobugs.map@polygons)
length(geobugs.map@polygons)
# Save the posterior mean of exp(v) in a dataframe
row.names(LipCancerData) = names(geobugs.map)
wards = SpatialPolygonsDataFrame(geobugs.map,LipCancerData)
head(wards@data)
# Mapping!
spplot(obj=wards, zcol="SMR",main="")
head(wards@data)
LipCancerData$SMR = LipCancerData$O/LipCancerData$E
geobugs.map = readSplus("LipCancer.map") #read a map exported from WinBUGS
class(geobugs.map)
# Save the posterior mean of exp(v) in a dataframe
row.names(LipCancerData) = names(geobugs.map)
wards = SpatialPolygonsDataFrame(geobugs.map,LipCancerData)
head(wards@data)
# Mapping!
spplot(obj=wards, zcol="SMR",main="")
# Mapping of SMR
spplot(obj=wards, zcol= c("X","SMR"),main="")
# Mapping of SMR
spplot(obj=wards, zcol="SMR",main="")
spplot(obj=wards, zcol="X",main="")
head(post.mean.exp.v)
# Prepare everything for the map
wards@data$post.mean = unlist(post.mean.exp.v)
head(wards@data)
# Mapping!
spplot(obj=wards, zcol="post.mean",main="")
SMR_estRR=cbind(LipCancerData$SMR, unlist(post.mean.exp.v))
op = par(mar = c(5,4,4,4) + 0.1)
plot(SMR_estRR[,1],type="n",ylab="SMR",xaxt="n",xlab="")
for(i in 1:56)  segments(1,SMR_estRR[i,1],56,SMR_estRR[i,2])
axis(side = 4)
mtext("estimated RR", side = 4, line = 3, cex = par("cex.lab"))
threshold = 0
post.prob.excess = lapply(lipcancer.poisson2$marginals.random[["id"]],
function(x) 1-inla.pmarginal(threshold,x))
post.prob.excess = lapply(output2$marginals.random[["id"]],
function(x)
1-inla.pmarginal(threshold,x))
range(unlist(post.prob.excess))
# Save the posterior excess probability in a dataframe
wards@data$post.prob = unlist(post.prob.excess)
# Mapping!
spplot(obj=wards, zcol="post.prob",main="")
library(spdep)
temp = poly2nb(wards)
temp
class(wards)
temp
temp
nb = poly2nb(wards)
plot(wards)
wards.nb = poly2nb(wards)
wards.nb
plot(wards.nb, coordinates(wards), pch = ".", add = TRUE,lty=2)
plot(wards.nb, coordinates(wards), pch = ".", add = TRUE,lty=2)
points(coordinates(wards)[,1],coordinates(wards)[,2],bg="red", pch=21)
plot(wards.nb, coordinates(wards), pch = ".", add = TRUE,lty=2, col=2)
points(coordinates(wards)[,1],coordinates(wards)[,2],bg="red", pch=21)
plot(wards)
text(coordinates(wards)[,1],coordinates(wards)[,2],LipCancerData$id)
text(coordinates(wards)[,1],coordinates(wards)[,2],LipCancerData$id, col=2)
2914.51+285.6+360+1400
4960*.22
974/4960
setwd("~/Dropbox/INLA - course/Glasgow 2019/Practical")
#--- Import the data ---#
load(paste(my.dir,"data_salmonellosis.RData",sep=""))
#my.dir <- "C:/Users/user/Dropbox/Book/ShortCourse/Practicals/Day3/MaterialPractical6/"
my.dir = "~/Dropbox/INLA - course/Glasgow 2019/Practical"
load("data_salmonellosis.RData")
#--- Import the data ---#
load(paste(my.dir,"data_salmonellosis.RData",sep=""))
paste(my.dir,"data_salmonellosis.RData",sep="")
